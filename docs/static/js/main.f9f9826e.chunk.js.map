{"version":3,"sources":["BornOn.js","App.js","reportWebVitals.js","aws-exports.js","index.js"],"names":["BornOn","props","user","login","created_at","App","useState","coins","updateCoins","limit","start","input","updateInput","loading","updateLoading","updateInputValues","type","value","fetchCoins","a","API","get","data","console","log","setUser","fetchBorn","born","useEffect","className","placeholder","onChange","e","target","onClick","map","coin","index","name","symbol","price_usd","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","awsmobile","Amplify","configure","config","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+TACaA,EAAS,SAACC,GACnB,IAAOC,EAAQD,EAARC,KAEP,OACI,mCACI,2CAAcA,EAAKC,MAAnB,gBAAuCD,EAAKE,WAA5C,UCsEGC,EAtEH,WAEV,MAA6BC,mBAAS,IAAtC,mBAAOC,EAAP,KAAcC,EAAd,KAGA,EAA6BF,mBAAS,CAAEG,MAAO,EAAGC,MAAO,IAAzD,mBAAOC,EAAP,KAAcC,EAAd,KAEA,EAAiCN,oBAAS,GAA1C,mBAAOO,EAAP,KAAgBC,EAAhB,KAEA,SAASC,EAAkBC,EAAMC,GAC/BL,EAAY,2BAAKD,GAAN,kBAAcK,EAAOC,KAGlC,IAAMC,EAAU,uCAAG,gCAAAC,EAAA,6DACjBL,GAAc,GACNL,EAAiBE,EAAjBF,MAAOC,EAAUC,EAAVD,MAFE,SAGEU,IAAIC,IAAI,YAAR,uBAAqCZ,EAArC,kBAAoDC,IAHtD,OAGXY,EAHW,OAIjBC,QAAQC,IAAIF,EAAKf,OACjBC,EAAYc,EAAKf,OACjBgB,QAAQC,IAAIF,EAAKf,OACjBO,GAAc,GAPG,2CAAH,qDAWhB,EAAwBR,mBAAS,IAAjC,mBAAOJ,EAAP,KAAauB,EAAb,KAGMC,EAAS,uCAAG,4BAAAP,EAAA,sEACGC,IAAIC,IAAI,UAAW,SADtB,OACVC,EADU,OAEhBG,EAAQH,EAAKK,MAFG,2CAAH,qDAcf,OARFC,qBAAU,WACRV,MACC,IAEDU,qBAAU,WACRF,MACC,IAGD,sBAAKG,UAAU,MAAf,UACI,uBACAC,YAAY,QACZC,SAAU,SAAAC,GAAC,OAAIjB,EAAkB,QAASiB,EAAEC,OAAOhB,UAErD,uBACEa,YAAY,QACZC,SAAU,SAAAC,GAAC,OAAIjB,EAAkB,QAASiB,EAAEC,OAAOhB,UAErD,wBAAQiB,QAAShB,EAAjB,yBAEOL,GAAW,6CAITA,GAAWN,EAAM4B,KAAI,SAACC,EAAMC,GAAP,OACpB,gCACE,+BAAKD,EAAKE,KAAV,MAAmBF,EAAKG,UACxB,mCAAMH,EAAKI,eAFHH,MAOd,cAAC,EAAD,CAAQnC,KAAMA,QC3DXuC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCaCQ,EAjBG,CACd,mBAAsB,YACtB,uBAA0B,CACtB,CACI,KAAQ,YACR,SAAY,6DACZ,OAAU,aAEd,CACI,KAAQ,UACR,SAAY,6DACZ,OAAU,e,MCPtBC,QAAQC,UAAUC,GAElBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BjB,M","file":"static/js/main.f9f9826e.chunk.js","sourcesContent":["import React from 'react';\nexport const BornOn = (props) => {\n    const {user} = props;\n\n    return (\n        <>\n            <h2>The user {user.login} was born on {user.created_at}.</h2>\n        </>\n    )\n}\n","import React, { useState, useEffect } from 'react';\nimport { API } from 'aws-amplify';\nimport './App.css';\nimport { BornOn } from './BornOn';\n\n\nconst App = () => {\n  // Create coins & born variables and set to empty array\n  const [coins, updateCoins] = useState([]);\n  \n  // Create additional state to hold user input for limit and start properties\n  const [input, updateInput] = useState({ limit: 5, start: 0 });\n\n  const [loading, updateLoading] = useState(true);\n// Create a new function to allow users to update the input values\n  function updateInputValues(type, value) {\n    updateInput({ ...input, [type]: value });\n  }\n  // Define function to all API\n  const fetchCoins = async() => {\n    updateLoading(true);\n    const { limit, start } = input;\n    const data = await API.get('cryptoapi', `/coins?limit=${limit}&start=${start}`);\n    console.log(data.coins)\n    updateCoins(data.coins)\n    console.log(data.coins)\n    updateLoading(false);\n  }\n\n  \n  const [user, setUser] = useState([]);\n\n  // Define function to all API\n  const fetchBorn = async() => {\n    const data = await API.get('bornapi', '/born');\n    setUser(data.born);\n   \n  }\n// Call fetchCoins & fetchBorn function when component loads\nuseEffect(() => {\n  fetchCoins()\n}, [])\n\n  useEffect(() => {\n    fetchBorn()\n  }, [])\n\n  return (\n    <div className=\"App\">\n        <input\n        placeholder=\"start\"\n        onChange={e => updateInputValues('start', e.target.value)}\n      />\n      <input\n        placeholder=\"limit\"\n        onChange={e => updateInputValues('limit', e.target.value)}\n      />\n      <button onClick={fetchCoins}>Fetch Coins</button>\n        \n            {loading && <h2>Loading...</h2>}\n            \n            {\n              \n              !loading && coins.map((coin, index) => (\n                <div key={index}>\n                  <h2>{coin.name} - {coin.symbol}</h2>\n                  <h5>${coin.price_usd}</h5>\n                  {/* <h2>The user {born.login} was born on {born.created_at}.</h2> */}\n                </div>\n              ))\n            }\n            <BornOn user={user} />\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/* eslint-disable */\n// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\n\nconst awsmobile = {\n    \"aws_project_region\": \"us-east-2\",\n    \"aws_cloud_logic_custom\": [\n        {\n            \"name\": \"cryptoapi\",\n            \"endpoint\": \"https://9klu56nf5g.execute-api.us-east-2.amazonaws.com/dev\",\n            \"region\": \"us-east-2\"\n        },\n        {\n            \"name\": \"bornapi\",\n            \"endpoint\": \"https://af4jtg1ihb.execute-api.us-east-2.amazonaws.com/dev\",\n            \"region\": \"us-east-2\"\n        }\n    ]\n};\n\n\nexport default awsmobile;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport Amplify from 'aws-amplify';\nimport config from './aws-exports';\nAmplify.configure(config);\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}